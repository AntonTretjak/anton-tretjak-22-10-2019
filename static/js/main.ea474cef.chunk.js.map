{"version":3,"sources":["app/components/Header/Header.jsx","app/components/Search/Search.jsx","store/reducers/search-results/search-actions.js","app/containers/SearchContainer/SearchContainer.jsx","app/components/Card/Card.jsx","app/components/CityWeather/CityWeather.jsx","store/reducers/city-weather/city-actions.js","store/reducers/forecast/forecast-actions.js","app/containers/CityWeatherContainer/CityWeatherContainer.jsx","app/routes/Home/Home.jsx","app/components/Favorites/Favorites.jsx","app/containers/FavoritesContainer/FavoritesContainer.jsx","app/routes/Favorites/Favorites.jsx","app/App.js","store/reducers/search-results/search-reducer.js","store/reducers/city-weather/city-reducer.js","store/reducers/forecast/forecast-reducer.js","store/root-reducer.js","utils/request-util.js","utils/constants.js","api/weather-requests.js","store/sagas/search-saga.js","store/sagas/city-saga.js","store/sagas/forecast-saga.js","store/root-saga.js","store/store.js","index.js"],"names":["connect","state","isError","favoritesCitiesData","error","forecastData","props","className","Link","to","Search","searchResults","search","select","React","useState","value","setValue","searchResultsNode","map","item","onClick","Key","LocalizedName","key","onChange","event","target","SEARCH","SEARCH_SUCCESS","SEARCH_FAIL","SEARCH_SELECT","searchFail","type","payload","isLoading","selectResult","selectedKey","selectedCity","city","dispatch","searchString","Card","topText","middleText","additionalText","CityWeather","favorites","JSON","parse","localStorage","getItem","this","getData","cityKey","setItem","stringify","setState","undefined","temperature","weeklyForecast","currentStatus","getTemperature","temp","Temperature","Maximum","Value","Unit","forecasts","index","moment","Date","format","setToFavorite","Component","WEATHER","WEATHER_SUCCESS","WEATHER_FAIL","initWeather","weatherFail","FORECAST","FORECAST_SUCCESS","FORECAST_FAIL","forecastFail","temperatureData","favoritesCities","metric","WeatherText","data","Home","Favorites","redirect","navigateToHome","selectCity","keys","Object","length","forEach","Redirect","cities","Metric","FavoritesContainer","App","Switch","Route","exact","path","component","initState","combineReducers","action","defaultRequest","axiosInstance","requestConfig","a","request","axios","create","callServer","apikey","searchPlace","text","Promise","resolve","reject","url","method","headers","then","response","getCurrentWeather","getForecast","updateOnSelect","searchSaga","call","requestResult","status","put","results","name","delay","takeEvery","getWeather","citySaga","weatherData","indexOf","fetchForecast","forecastSaga","currentKey","DailyForecasts","takeLatest","rootSaga","all","fork","store","sagaMiddleware","createSagaMiddleware","middleware","composedEnhancers","compose","applyMiddleware","createStore","rootReducer","run","Application","root","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.ea474cef.chunk.js","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {Link} from 'react-router-dom';\n\nimport './index.css';\n\nconst Header = props => {\n  return <div className='main-header'>\n    {props.isError && <span className='error'>Error</span>}\n    <div className='main-header__logo'>\n      <span>Herolo Weather Task</span>\n    </div>\n    <div className='main-header__nav'>\n      <Link to='/anton-tretjak-22-10-2019'>Home</Link>\n      <Link to='/anton-tretjak-22-10-2019/favorites'>Favorites</Link>\n    </div>\n  </div>;\n};\n\nconst mapStateToProps = state => ({\n  isError: state.favoritesCitiesData.error || state.forecastData.error || state.favoritesCitiesData.error\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Header);\n\n\n// export default Header;\n","import React from 'react';\n\nimport './index.css';\n\nconst Search = props => {\n  const {searchResults, error, search, select} = props;\n  const [value, setValue] = React.useState('');\n  const searchResultsNode = !error\n    ? searchResults.map((item) =>\n      <div\n        onClick={() => select(item.Key, item.LocalizedName)}\n        key={item.Key}\n        className='search-app__option'\n      >{item.LocalizedName}</div>)\n    : <div className='search-app__option search-app__option_error'>{error}</div>;\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return <div className='search-app'>\n    <div className='search-app__wrapper'>\n      <input\n        value={value}\n        onChange={handleChange}\n        className='search-app__input'\n      />\n      <div className='search-app__icon' onClick={() => search(value)}>\n        <i className='material-icons'>search</i>\n      </div>\n    </div>\n    <div className='search-app__results'>\n      {searchResultsNode}\n    </div>\n  </div>;\n};\n\nexport default Search;\n","export const SEARCH = 'SEARCH';\nexport const SEARCH_SUCCESS = SEARCH + '_SUCCESS';\nexport const SEARCH_FAIL = SEARCH + '_FAIL';\nexport const SEARCH_SELECT = SEARCH + '_SELECT';\n\nexport function search(searchString) {\n  return {\n    type: SEARCH,\n    payload: {\n      searchString,\n      isLoading: true,\n      error: ''\n    }\n  };\n}\n\nexport function searchSuccess(results) {\n  return {\n    type: SEARCH_SUCCESS,\n    payload: {\n      isLoading: false,\n      searchResults: results,\n      searchString: '',\n      error: ''\n    }\n  };\n}\n\nexport function searchFail(error) {\n  return {\n    type: SEARCH_FAIL,\n    payload: {\n      isLoading: false,\n      searchResults: [],\n      error\n    }\n  };\n}\n\nexport function selectResult(payload) {\n  return {\n    type: SEARCH_SELECT,\n    payload: {\n      selectedKey: payload.key,\n      selectedCity: payload.city,\n      isLoading: false,\n      searchResults: [],\n      error: ''\n    }\n  }\n}\n","import {connect} from 'react-redux';\nimport Search from '../../components/Search/Search';\nimport {search, selectResult} from '../../../store/reducers/search-results/search-actions';\n\nconst mapStateToProps = (state) => ({\n  error: state.search.error,\n  searchResults: state.search.searchResults\n});\n\n\nconst mapDispatchToProps = dispatch => ({\n  search: (searchString) => {\n    dispatch(search(searchString));\n  },\n  select: (key, city) => {\n    dispatch(selectResult({key, city}))\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Search);\n","import React from 'react';\n\nimport './index.css';\n\nconst Card = props => {\n  const { topText, middleText, additionalText } = props;\n\n  return <div className='card'>\n    <span className='card_top'>{topText}</span>\n    <span className='card_middle'>{middleText}</span>\n    {additionalText && <span className='card_additional'>{additionalText}</span>}\n  </div>;\n};\n\nexport default Card;\n","import React from 'react';\nimport moment from 'moment';\n\nimport Card from '../Card/Card';\nimport './index.css';\n\nclass CityWeather extends React.Component{\n  state = {\n    favorites: JSON.parse(localStorage.getItem('favorites')) || {}\n  };\n\n  componentDidMount() {\n    this.props.getData(this.props.cityKey);\n  }\n\n  componentWillUnmount() {\n    localStorage.setItem('favorites', JSON.stringify(this.state.favorites));\n  }\n\n  setToFavorite(key, city) {\n    if (this.state.favorites[key]) {\n\n    }\n    this.setState({\n      favorites: {...this.state.favorites, [key]: this.state.favorites[key] ? undefined : city}\n    }, () => {\n      localStorage.setItem('favorites', JSON.stringify(this.state.favorites));\n    });\n  }\n\n  render() {\n    const { city, temperature, weeklyForecast, currentStatus, cityKey } = this.props;\n\n    const getTemperature = (item) => {\n      const temp = item.Temperature.Maximum;\n      return temp ? temp.Value + temp.Unit : '- -'\n    };\n\n    const forecasts = weeklyForecast && weeklyForecast.map((item, index) =>\n      <Card key={index} topText={moment(item.Date).format('ddd')} middleText={getTemperature(item)} />);\n\n    return <div className='city-weather'>\n      <div className='city-weather__current'>\n        <div className='city-weather__info'>\n          <div className='city-weather__city-icon'>\n\n          </div>\n          <div className='city-weather__city-info'>\n            <span>{city}</span>\n            <span>{temperature}</span>\n          </div>\n        </div>\n        <div\n          className={`city-weather__favorite ${this.state.favorites[cityKey] ? 'city-weather__favorite_selected' : ''}`}\n          onClick={() => this.setToFavorite(cityKey, city)}\n        >\n          <span>Favorites</span>\n        </div>\n      </div>\n      <div className='city-weather__status'>\n        {currentStatus}\n      </div>\n      <div className='city-weather__forecast'>\n        {forecasts}\n      </div>\n    </div>;\n  }\n};\n\nexport default CityWeather;\n","export const WEATHER = 'WEATHER';\nexport const WEATHER_SUCCESS = WEATHER + '_SUCCESS';\nexport const WEATHER_FAIL = WEATHER + '_FAIL';\n\nexport function initWeather(key) {\n  return {\n    type: WEATHER,\n    key,\n    payload: {\n      isLoading: true,\n      error: ''\n    }\n  };\n}\n\nexport function weatherSuccess(payload) {\n  return {\n    type: WEATHER_SUCCESS,\n    payload: {\n      isLoading: false,\n      data: payload.data,\n      key: payload.key,\n      error: ''\n    }\n  };\n}\n\nexport function weatherFail(error) {\n  return {\n    type: WEATHER_FAIL,\n    payload: {\n      isLoading: false,\n      error\n    }\n  };\n}\n","export const FORECAST = 'FORECAST';\nexport const FORECAST_SUCCESS = FORECAST + '_SUCCESS';\nexport const FORECAST_FAIL = FORECAST + '_FAIL';\n\nexport function initForecast() {\n  return {\n    type: FORECAST,\n    payload: {\n      isLoading: true,\n      error: ''\n    }\n  };\n}\n\nexport function forecastSuccess(payload) {\n  return {\n    type: FORECAST_SUCCESS,\n    payload: {\n      isLoading: false,\n      data: payload,\n      error: ''\n    }\n  };\n}\n\nexport function forecastFail(error) {\n  return {\n    type: FORECAST_FAIL,\n    payload: {\n      isLoading: false,\n      error\n    }\n  };\n}\n","import {connect} from 'react-redux';\nimport CityWeather from '../../components/CityWeather/CityWeather';\nimport {initWeather} from '../../../store/reducers/city-weather/city-actions';\nimport {initForecast} from '../../../store/reducers/forecast/forecast-actions';\n\nconst mapStateToProps = state => {\n  const temperatureData = state.favoritesCitiesData.favoritesCities[state.search.selectedKey]\n    ? state.favoritesCitiesData.favoritesCities[state.search.selectedKey].Temperature[state.favoritesCitiesData.metric]\n    : {\n      Value: '-',\n      Unit: '-'\n    };\n  const temperature = temperatureData.Value + temperatureData.Unit;\n\n  return {\n    city: state.search.selectedCity,\n    cityKey: state.search.selectedKey,\n    temperature,\n    currentStatus: state.favoritesCitiesData.favoritesCities[state.search.selectedKey]\n      ? state.favoritesCitiesData.favoritesCities[state.search.selectedKey].WeatherText\n      : '-',\n    weeklyForecast: state.forecastData.data\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getData: (key) => {\n    dispatch(initWeather(key));\n    dispatch(initForecast());\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CityWeather);\n","import * as React from \"react\";\nimport Search from '../../containers/SearchContainer/SearchContainer';\nimport CityWeather from '../../containers/CityWeatherContainer/CityWeatherContainer';\n\nconst Home = () => <div>\n  <Search />\n  <CityWeather />\n</div>;\n\nexport default Home;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport Card from '../Card/Card';\nimport './index.css';\n\nclass Favorites extends React.Component {\n  state = {\n    favorites: JSON.parse(localStorage.getItem('favorites')) || {},\n    redirect: false\n  };\n\n  componentDidMount() {\n    const keys = Object.keys(this.state.favorites);\n    if (keys.length) {\n      keys.forEach((item) => {\n        this.props.getData(item);\n      })\n    }\n  }\n\n  navigateToHome = (key, city) => {\n    this.props.selectCity(key, city);\n    this.setState({\n      redirect: true\n    });\n  };\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to='/'/>\n    }\n\n    const { cities } = this.props;\n\n    const favorites = Object.keys(this.state.favorites) && Object.keys(this.state.favorites).map((item) => {\n      const temp = cities[item];\n      const temperature = temp && temp.Temperature.Metric.Value ? temp.Temperature.Metric.Value + temp.Temperature.Metric.Unit : '- -';\n      return <div key={item} onClick={() => this.navigateToHome(item, this.state.favorites[item])}>\n        <Card\n          topText={this.state.favorites[item]}\n          middleText={temperature}\n          additionalText={temp && temp.WeatherText}\n        />\n      </div>;\n    });\n\n    return <div className='city-weather'>\n      <div className='city-weather__forecast'>\n        {favorites && 'There is no favorites now'}\n      </div>\n    </div>;\n  }\n};\n\nexport default Favorites;\n","import {connect} from 'react-redux';\nimport Favorites from '../../components/Favorites/Favorites';\nimport {initWeather} from '../../../store/reducers/city-weather/city-actions';\nimport {selectResult} from '../../../store/reducers/search-results/search-actions';\n\nconst mapStateToProps = state => ({\n  cities: state.favoritesCitiesData.favoritesCities\n});\n\n\nconst mapDispatchToProps = dispatch => ({\n  getData: (key) => {\n    dispatch(initWeather(key));\n  },\n  selectCity: (key, city) => {\n    dispatch(selectResult({key, city}))\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Favorites);\n","import * as React from \"react\";\n\nimport FavoritesContainer from '../../containers/FavoritesContainer/FavoritesContainer';\n\nconst Favorites = props => <FavoritesContainer />;\n\nexport default Favorites;\n","import React from 'react';\n\nimport {Switch, Route} from 'react-router-dom';\n\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Home from './routes/Home/Home';\nimport Favorites from './routes/Favorites/Favorites';\n\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Header/>\n      <Switch>\n        <Route exact path='/anton-tretjak-22-10-2019' component={Home} />\n        <Route exact path='/anton-tretjak-22-10-2019/favorites' component={Favorites} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import {SEARCH, SEARCH_SUCCESS, SEARCH_FAIL, SEARCH_SELECT} from './search-actions';\n\nconst initState = {\n  isLoading: false,\n  searchString: '',\n  searchResults: [],\n  error: '',\n  selectedKey: '215854',\n  selectedCity: 'Tel Aviv'\n};\n\nexport default function search(state = initState, action) {\n  switch (action.type) {\n    case SEARCH:\n    case SEARCH_SUCCESS:\n    case SEARCH_FAIL:\n    case SEARCH_SELECT:\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n}\n","import {WEATHER, WEATHER_FAIL, WEATHER_SUCCESS} from './city-actions';\n\nconst initState = {\n  isLoading: false,\n  favoritesCities: {},\n  error: '',\n  metric: 'Metric'\n};\n\nexport default function favoritesCitiesData(state = initState, action) {\n  switch (action.type) {\n    case WEATHER:\n    case WEATHER_FAIL:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case WEATHER_SUCCESS:\n      const cities = {\n        ...state.favoritesCities,\n        [action.payload.key]: action.payload.data\n      };\n      const newState = {\n        ...state,\n        error: action.payload.error,\n        isLoading: action.payload.isLoading,\n        favoritesCities: cities\n      };\n      return newState;\n    default:\n      return {\n        ...state\n      };\n  }\n}\n","import {FORECAST, FORECAST_FAIL, FORECAST_SUCCESS} from './forecast-actions';\n\nconst initState = {\n  isLoading: false,\n  data: [],\n  error: '',\n};\n\nexport default function forecastData(state = initState, action) {\n  switch (action.type) {\n    case FORECAST:\n    case FORECAST_FAIL:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case FORECAST_SUCCESS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n}\n","import {combineReducers} from 'redux';\n\nimport search from './reducers/search-results/search-reducer';\nimport favoritesCitiesData from './reducers/city-weather/city-reducer';\nimport forecastData from './reducers/forecast/forecast-reducer';\n\nexport default combineReducers({\n  search,\n  favoritesCitiesData,\n  forecastData\n});\n","import axios from \"axios\";\n\nasync function defaultRequest(axiosInstance, requestConfig) {\n    const request = axiosInstance.request(requestConfig);\n    return await request;\n}\n\nconst axiosInstance = axios.create();\n\nexport async function callServer(requestConfig) {\n    return await defaultRequest(axiosInstance, requestConfig)\n}\n","// export const apikey = 'upmElnSDGWSVtzZfcSztAexrOW83wiYB';\n// export const apikey = 'iHrKVp9LLKfwdQsjeOPRJHTZqTX33TGV';\nexport const apikey = '1ON1wZSnkAvb6KTCKqPLRuSpc9Izsmzg';\n","import { callServer } from \"../utils/request-util\";\nimport { apikey } from \"../utils/constants\";\n\nexport function searchPlace(text) {\n  return new Promise((resolve, reject) => {\n    callServer({\n      url: `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${apikey}&q=${text}`,\n      method: \"GET\",\n      headers:  {\n        \"content-type\": \"application/json\"\n      }\n    }).then(\n      response => {\n        resolve(response);\n      },\n      error => {\n        reject(error);\n      }\n    );\n  });\n}\n\nexport function getCurrentWeather(key) {\n  return new Promise((resolve, reject) => {\n    callServer({\n      url: `https://dataservice.accuweather.com/currentconditions/v1/${key}?apikey=${apikey}`,\n      method: \"GET\",\n      headers:  {\n        \"content-type\": \"application/json\"\n      }\n    }).then(\n      response => {\n        resolve(response);\n      },\n      error => {\n        reject(error);\n      }\n    );\n  });\n}\n\nexport function getForecast(key) {\n  return new Promise((resolve, reject) => {\n    callServer({\n      url: `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${key}?apikey=${apikey}&metric=true`,\n      method: \"GET\",\n      headers:  {\n        \"content-type\": \"application/json\"\n      }\n    }).then(\n      response => {\n        resolve(response);\n      },\n      error => {\n        reject(error);\n      }\n    );\n  });\n}\n","import {call, put, takeEvery, delay} from 'redux-saga/effects';\n\nimport {\n  SEARCH,\n  searchSuccess,\n  searchFail,\n  SEARCH_SELECT\n} from '../reducers/search-results/search-actions';\nimport {searchPlace} from '../../api/weather-requests';\nimport {initWeather} from '../reducers/city-weather/city-actions';\n\nfunction* search(action) {\n  try {\n    const requestResult =\n      yield call(searchPlace, action.payload.searchString);\n    if (requestResult.status === 200) {\n      yield put(searchSuccess(requestResult.data));\n    }\n  } catch (e) {\n    yield put(searchFail(e.name));\n    yield delay(3000);\n    yield put(searchFail(''));\n  }\n}\n\nfunction* updateOnSelect(action) {\n  yield put(initWeather(action.payload.key || action.payload.selectedKey));\n}\n\nexport default function* searchSaga() {\n  yield takeEvery(SEARCH, search);\n  yield takeEvery(SEARCH_SELECT, updateOnSelect);\n}\n","import {call, put, takeEvery, select, delay} from 'redux-saga/effects';\n\nimport {getCurrentWeather} from '../../api/weather-requests';\nimport {WEATHER, weatherFail, weatherSuccess} from '../reducers/city-weather/city-actions';\n\nfunction* getWeather(action) {\n  try {\n    const weatherData = yield select((state) => state.favoritesCitiesData.favoritesCities);\n    const isIncluded = Object.keys(weatherData).indexOf(action.key);\n\n    if (isIncluded === -1) {\n      const requestResult =\n        yield call(getCurrentWeather, action.key);\n      if (requestResult.status === 200) {\n        yield put(weatherSuccess({data: requestResult.data[0], key: action.key}));\n      }\n    }\n  } catch (e) {\n    yield put(weatherFail(e.name));\n    yield delay(3000);\n    yield put(weatherFail(''));\n  }\n}\n\nexport default function* citySaga() {\n  yield takeEvery(WEATHER, getWeather);\n}\n","import {call, put, takeLatest, select, delay} from 'redux-saga/effects';\nimport {FORECAST, forecastFail, forecastSuccess} from '../reducers/forecast/forecast-actions';\nimport {getForecast} from '../../api/weather-requests';\nimport {SEARCH_SELECT} from '../reducers/search-results/search-actions';\n\n\nfunction* fetchForecast() {\n  try {\n    const currentKey = yield select((state) => state.search.selectedKey);\n    const requestResult = yield call(getForecast, currentKey);\n    if (requestResult.status === 200) {\n      yield put(forecastSuccess(requestResult.data.DailyForecasts));\n    }\n  } catch (e) {\n    yield put(forecastFail(e.name));\n    yield delay(3000);\n    yield put(forecastFail(''));\n  }\n\n}\n\nexport default function* forecastSaga() {\n  yield takeLatest(FORECAST, fetchForecast);\n  yield takeLatest(SEARCH_SELECT, fetchForecast);\n}\n","import {all, fork} from 'redux-saga/effects';\nimport searchSaga from './sagas/search-saga';\nimport citySaga from './sagas/city-saga';\nimport forecastSaga from './sagas/forecast-saga';\n\nexport default function* rootSaga() {\n  yield all([\n    fork(searchSaga),\n    fork(citySaga),\n    fork(forecastSaga)\n  ]);\n}\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\n\nexport default () => {\n  const enhancers = [];\n\n  // Dev tools are helpful\n  if (process.env.NODE_ENV === 'development') {\n    const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\n\n    if (typeof devToolsExtension === 'function') {\n      enhancers.push(devToolsExtension());\n    }\n  }\n\n  const sagaMiddleware = createSagaMiddleware();\n  const middleware = [sagaMiddleware];\n  const composedEnhancers = compose(\n    applyMiddleware(...middleware),\n    ...enhancers\n  );\n\n  const initialState = {};\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composedEnhancers\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return {\n    store\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport './app/index.css';\nimport App from './app/App';\nimport createStore from \"./store/store\";\n\nconst { store } = createStore();\n\nconst Application = (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nconst root = document.getElementById('root');\n\nReactDOM.render(Application, root);\n"],"sourceRoot":""}